name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '1.0.0'

# Add explicit permissions needed for creating releases
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-native:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
            platform: Linux
            artifact_extension: ''
            
          - os: windows-latest
            rid: win-x64
            platform: Windows
            artifact_extension: '.exe'
            
          - os: macos-latest
            rid: osx-x64
            platform: macOS
            artifact_extension: ''
            
          - os: macos-latest
            rid: osx-arm64
            platform: macOS-arm64
            artifact_extension: ''

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build Native AOT
      run: dotnet publish -c Release -r ${{ matrix.rid }} --self-contained true -p:PublishAot=true
    
    - name: Get Version (from tag)
      id: get_version_tag
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Get Version (from input)
      id: get_version_input
      if: github.event_name == 'workflow_dispatch'
      run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Set version
      id: set_version
      run: |
        if [ "${{ steps.get_version_tag.outputs.VERSION }}" != "" ]; then
          echo "VERSION=${{ steps.get_version_tag.outputs.VERSION }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${{ steps.get_version_input.outputs.VERSION }}" >> $GITHUB_OUTPUT
        fi
      shell: bash
      
    - name: Rename Artifact
      run: |
        mkdir -p ./artifacts
        cp ./bin/Release/net8.0/${{ matrix.rid }}/publish/apitester${{ matrix.artifact_extension }} ./artifacts/apitester-${{ steps.set_version.outputs.VERSION }}-${{ matrix.platform }}${{ matrix.artifact_extension }}
      shell: bash
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: apitester-${{ matrix.platform }}
        path: ./artifacts/apitester-${{ steps.set_version.outputs.VERSION }}-${{ matrix.platform }}${{ matrix.artifact_extension }}
        
  create-release:
    needs: build-native
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Get Version (from tag)
      id: get_version_tag
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Get Version (from input)
      id: get_version_input
      if: github.event_name == 'workflow_dispatch'
      run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Set version
      id: set_version
      run: |
        if [ "${{ steps.get_version_tag.outputs.VERSION }}" != "" ]; then
          echo "VERSION=${{ steps.get_version_tag.outputs.VERSION }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${{ steps.get_version_input.outputs.VERSION }}" >> $GITHUB_OUTPUT
        fi
      shell: bash
      
    - name: List artifacts
      run: find ./artifacts -type f
      shell: bash
    
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ steps.set_version.outputs.VERSION }}
        name: Release v${{ steps.set_version.outputs.VERSION }}
        draft: false
        prerelease: false
        artifacts: "./artifacts/**/*"
        artifactContentType: application/octet-stream
        allowUpdates: true
        removeArtifacts: false
        token: ${{ github.token }}